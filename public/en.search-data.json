{"/chihuahua/":{"data":{"":"","contact#CONTACT":"X：こちら","name-ms-chihuahua-aka-ayc3361#\u003cfont color=\"#2DC26B\"\u003e\u003cstrong\u003ename\u003c/strong\u003e\u003c/font\u003e MS. chihuahua aka ayc3361":"\nname MS. chihuahua aka ayc3361 Programming skills: Beginner ","自己紹介#自己紹介":"普段は、基本的に子育てに奮闘しています。 プログラミングに興味を持ち、子育ての隙間時間で悪戦苦闘しながら挑戦しています。\n🍀趣味：旅行、YouTube鑑賞、ゲーム"},"title":"chihuahua"},"/docs/":{"data":{"":"This is a demo of the theme’s documentation layout.","hello-world#Hello, World!":" main.gopackage main import \"fmt\" func main() { fmt.Println(\"Hello, World!\") } "},"title":"Documentation"},"/docs/members/chihuahua/":{"data":{"":"","contact#CONTACT":"X：こちら","name-ms-chihuahua-aka-ayc3361#\u003cfont color=\"#2DC26B\"\u003e\u003cstrong\u003ename\u003c/strong\u003e\u003c/font\u003e MS. chihuahua aka ayc3361":"\nname MS. chihuahua aka ayc3361 Programming skills: Beginner ","自己紹介#自己紹介":"普段は、基本的に子育てに奮闘しています。 プログラミングに興味を持ち、子育ての隙間時間で悪戦苦闘しながら挑戦しています。\n🍀趣味：旅行、YouTube鑑賞、ゲーム"},"title":"chihuahua"},"/docs/members/love/":{"data":{"見出し#見出し":"見出し# ~ ###### (h1 ~ h6)までの見出しの文字の大きさを指定できます。\n画像を差し込みたい場合は、content/imagesフォルダに画像を格納。 “! [テキスト] (ファイルパス)“という記述で差し込むことができます。 imagesフォルダにあるlove.jpgを差し込みたい場合は、以下のように記述します。(相対パスに注意)\nショートコードを使うことでhextraに定義された特殊なレンダリングを使うこともできます。幅と高さを指定することや画像の表示形式を指定することも可能です。（幅400 x 高さ400）\nその他自己紹介やスキル、プロジェクトへの意気込みなどを、マークダウン記法を使いながら自由に書いてください。\nTwitter: … Telegram: … Link: … "},"title":"Love For Qom"},"/docs/references/":{"data":{"":"参考資料置き場 hugo"},"title":"References"},"/docs/references/git/gitflow/":{"data":{"":"","#":"GitFlow（ギットフロー）　とは、Gitを使ったチーム開発でのブランチ戦略（運用ルール） の1つで、Vincent Driessenによって提案された開発フローです。複数人での開発や、リリース管理を効率的に行うためのベストプラクティスとして広く使われています。\n🔧 GitFlowの基本的なブランチ構成 GitFlowでは、以下のようなブランチを使い分けます： Playgroundでは、まず操作に慣れてもらうためにmainブランチ、devブランチ、feature/＊ブランチの3つのブランチを使用して実際の流れを体験してもらいます。\nブランチ名 用途 main（または master） 本番環境のコード。常に安定している状態が求められる。 dev 開発の中心となるブランチ。機能追加や修正はここをベースに行う。 feature/* 機能開発用のブランチ。developから派生し、開発完了後はdevelopにマージ。 release/* リリース準備用ブランチ。developから派生し、バグ修正やバージョン番号の更新などを行い、mainとdevelopにマージ。 hotfix/* 緊急修正用ブランチ。mainから派生し、修正後にmainとdevelopにマージ。 🔁 ブランチの構成イメージ main ├── dev | ├── feature/add-login |\t├── feature/add-payment |\t└── release/1.0.0 └── hotfix/fix-critical-bug 📝 開発フローの概要 新機能の開発\n→ dev ブランチから feature/* を作成して作業。終わったら develop にマージ。\nリリース準備\n→ develop ブランチから release/* を作成して、調整・テストを行い main と develop にマージ。\n本番でバグ発見！\n→ main から hotfix/* を作って修正、修正後に main と develop にマージ。\n🤝 GitFlowのメリット 機能追加・リリース・修正などの作業が明確に分離され、作業の混乱を避けやすい\nチームでの並列開発がやりやすい\n安定した本番コード（main）と開発コード（dev）の分離","-開発ブランチfeatureブランチの作成手順#✅ 開発ブランチ（featureブランチ）の作成手順":"🔧 前提 すでにローカルにリポジトリをクローン済み\ndev ブランチが存在している\n⬇️ 手順（ターミナル / Git Bash） # 1. devブランチに切り替える git checkout dev # 2. 最新のdevelopブランチを取得しておく（他の人が更新している場合もあるため） git pull origin dev # 3. featureブランチを作成（名前は自由に設定。例：feature/love） git checkout -b feature/love # 4. 作業後、GitHubにプッシュ（初回は -u オプションでトラッキングも設定） git push -u origin feature/login-form # 5. 2回目以降のプッシュ git push -b オプションは「新しいブランチを作って同時に切り替える」という意味です。\n-u オプションは「このローカルブランチとGitHub上のリモートブランチを紐づける」ために使います。-uオプションで紐づけられたら、以降はgit pushのみでリポジトリにプッシュすることが可能になります。\n💡 ブランチ名の命名ルール（推奨） GitFlowでは以下のような形式がよく使われます：\nfeature/：機能追加\n例：feature/signup-page、feature/add-payment bugfix/：開発中の不具合修正\nhotfix/：本番環境の緊急修正"},"title":"GitFlow"},"/docs/references/hugo/classes/":{"data":{"":"このページでは、クラスを使用してマージンやパディング、フォントのサイズや色、要素のレイアウトを指定する方法を説明します。クラスを使用してcssを適応できるため、別ファイルを作成する必要が減るため便利です。","1-マージン余白の指定方法hextratailwind-prefix付き#1. マージン（余白）の指定方法（Hextra/Tailwind prefix付き）":" content/_index.md \u003cdiv class=\"hx-mt-6 hx-mb-6\"\u003e Teh Playground \u003c/div\u003e - \u003cdiv\u003eで囲まれた要素に対して上下方向に 1.5rem|24px|のマージン（空白）を入れる。 マージンとは、要素の外側の余白のことです。 クラス 意味 ピクセル換算(基準: 1 = 0.25rem = 4px) hx-m-0 全方向マージン 0 0px hx-m-4 全方向マージン 1rem 16px hx-mb-2 下方向だけ 0.5rem 8px hx-mt-8 上方向だけ 2rem 32px hx-ml-6 左方向だけ 1.5rem 24px hx-mx-4 左右だけ 1rem 16px hx-my-10 上下だけ 2.5rem 40px ","2-主な方向指定の略語#2. 主な方向指定の略語":" 接頭辞 対象方向 m 全方向 mt 上だけ (margin-top) mb 下だけ (margin-bottom) ml 左だけ (margin-left) mr 右だけ (margin-right) mx 左右両方 my 上下両方 ","3-数値スケール#3. 数値スケール":"Tailwind のスケールは 0～96 のほか px（1px）、auto などがあり、\nn の値は n × 0.25rem に変換されます。\n例：\nhx-mb-1 → 0.25rem (4px)\nhx-mb-6 → 1.5rem (24px)\nhx-mb-10 → 2.5rem (40px)","4-応用レスポンシブ対応#4. 応用（レスポンシブ対応）":"Tailwind はレスポンシブ指定も可能で、Hextraのprefix付きでも同じ書き方です。\n\u003cdiv class=\"hx-mb-4 md:hx-mb-8 lg:hx-mb-12\"\u003e ... \u003c/div\u003e - md: → 画面幅 768px 以上なら下に32pxマージンをとる - lg: → 画面幅 1024px 以上なら下に48pxマージンをとる ","5その他のユーティリティ#5.　その他のユーティリティ":" ① パディング（Padding） クラス例 効果 ピクセル換算 hx-p-0 全方向 0 0px hx-p-2 全方向 0.5rem 8px hx-p-4 全方向 1rem 16px hx-p-6 全方向 1.5rem 24px hx-pt-4 上だけ 1rem 16px hx-pb-8 下だけ 2rem 32px hx-pl-2 左だけ 0.5rem 8px hx-pr-2 右だけ 0.5rem 8px hx-px-4 左右 1rem 16px hx-py-4 上下 1rem 16px ② フォントサイズ（Font Size） クラス サイズ px換算（目安） hx-text-xs 0.75rem 12px hx-text-sm 0.875rem 14px hx-text-base 1rem 16px hx-text-lg 1.125rem 18px hx-text-xl 1.25rem 20px hx-text-2xl 1.5rem 24px hx-text-3xl 1.875rem 30px hx-text-4xl 2.25rem 36px ③ フォントウェイト（Font Weight） クラス 効果 hx-font-thin 極細 (100) hx-font-light 細め (300) hx-font-normal 標準 (400) hx-font-medium 中間 (500) hx-font-semibold やや太め (600) hx-font-bold 太字 (700) hx-font-extrabold 極太 (800) ④ 色（テキスト色・背景色） テキスト色例 背景色例 hx-text-red-500 hx-bg-red-500 hx-text-blue-500 hx-bg-blue-500 hx-text-gray-700 hx-bg-gray-200 hx-text-green-600 hx-bg-green-100 色は Tailwind のカラーパレットに準拠（50〜900 まで濃淡あり）\n5. レイアウト・その他 クラス 効果 hx-flex flexbox 有効化 hx-items-center 縦方向中央揃え hx-justify-center 横方向中央揃え hx-grid grid 有効化 hx-grid-cols-3 3カラムレイアウト(中身の要素を3列で表示) hx-gap-4 要素間の間隔 1rem (16px) に指定 hx-rounded 要素の角を丸くする（デフォルト半径） hx-rounded-lg 大きめの角丸 hx-shadow 要素にシャドウを入れる hx-shadow-lg 大きめシャドウ 💡 覚え方のコツ\nhx- を外せば Tailwind CSS の公式ドキュメントの例そのまま\n数字は 4px単位（0.25rem）で増える\nm と p 系は上下左右の頭文字で方向指定 (t, b, l, r, x, y)","6-参考リンク元はtailwindドキュメント#6. 参考リンク（元はTailwindドキュメント）":"Hextraでは hx- が付くだけで、Tailwind CSS Margin のすべてがそのまま使えます。"},"title":"Classes"},"/docs/references/hugo/hero/":{"data":{"1-hextrahero-badge#1. \u003ccode\u003ehextra/hero-badge\u003c/code\u003e":"","2-hextrahero-headline#2. \u003ccode\u003ehextra/hero-headline\u003c/code\u003e":"","3-hextrahero-subtitle#3. \u003ccode\u003ehextra/hero-subtitle\u003c/code\u003e":"","4-hextrahero-button#4. \u003ccode\u003ehextra/hero-button\u003c/code\u003e":"","5-hextrahero-section#5. \u003ccode\u003ehextra/hero-section\u003c/code\u003e":"","6-hextrafeature-gridヒーロー直下で並ぶカードの枠#6. \u003ccode\u003ehextra/feature-grid\u003c/code\u003e（ヒーロー直下で並ぶカードの枠）":"","7-hextrafeature-cardグリッド内のカード#7. \u003ccode\u003ehextra/feature-card\u003c/code\u003e（グリッド内のカード）":"Hero系ショートコード一覧1. hextra/hero-badge 役割：ヒーローの最上部に置く小さなバッジ（ラベル）。中身はスロット（自由なHTML/ショートコード）で記述。\n使い方：\n{{\u003c/* hextra/hero-badge */\u003e}} ...（ `\u003cspan\u003e` タグや `{{/*\u003c icon … */\u003e}}` を入れる {{\u003c/* /hextra/hero-badge */\u003e}} 備考：バッジ内にHTMLや別ショートコードを混ぜるとレンダリングが崩れる事例あり（Markdown/HTML混在が原因）。 GitHub\nパラメータ：（明示パラメータの公式記載なし）。コンテンツをそのまま入れる前提。\n※2024-12 のリリースで「badge にアイコン対応」が言及（内部対応）。 GitHub\n2. hextra/hero-headline 役割：ヒーローの大見出し（H1 相当の強い見出し）。\n使い方：\n{{\u003c/* hextra/hero-headline */\u003e}} テキスト {{\u003c/* /hextra/hero-headline */\u003e}} -　行の途中に \u003cbr class=\"…\"\u003e を挟む実例あり。 GitHubMyco | Git\nパラメータ：なし（中身スロットのみ）（確認できた範囲）。 3. hextra/hero-subtitle 役割：ヒーローのサブタイトル。\n使い方：\n{{\u003c/* hextra/hero-subtitle */\u003e}} テキスト {{\u003c/* /hextra/hero-subtitle */\u003e}} 実利用例多数。 Gitea: Git with a cup of tea+1Gitea: Git with a cup of tea+1\nパラメータ：なし（中身スロットのみ）（確認できた範囲）。 4. hextra/hero-button 役割：ヒーロー内の主要CTAボタン。\n使い方：\n{{\u003c/* hextra/hero-button text=\"Get Started\" link=\"docs\" */\u003e}} パラメータ（確認済み）：\ntext：ボタン表示文字列\nlink：リンク先パス/URL\n注意：**テーマ作者いわく「ランディング専用の内部コンポーネントなので、むやみに流用しない方がよい」**とのコメントあり。必要なら自作（Tailwind）推奨。 GitHub\n5. hextra/hero-section 役割：ヒーロー領域のセクション見出しを作るユーティリティ（h2 デフォルト）。\n使い方：\n{{\u003c/* hextra/hero-section */\u003e}} Used **Technologies　（デフォルトは h2 サイズの見出し） {{\u003c/* /hextra/hero-section */\u003e}} {{\u003c/* hextra/hero-section header=\"h3\" */\u003e}} Used Technologies （（h3 などに変更）） {{\u003c/* /hextra/hero-section */\u003e}} パラメータ（確認済み）：\nheader：h2/h3/h4… を指定（デフォルト h2） GitHub\nstyle：インラインCSSを渡せる（style=\"{{ . | safeCSS }}\" の実装あり） GitHub\n6. hextra/feature-grid（ヒーロー直下で並ぶカードの枠） 役割：フィーチャーカードのグリッドコンテナ。\n使い方：\n{{\u003c/* hextra/feature-grid */\u003e}} …（feature-card を並べる）… {{\u003c/* /hextra/feature-grid */\u003e}}. 実例多数。 GitHub\nパラメータ：なし（確認できた範囲）。 7. hextra/feature-card（グリッド内のカード） 役割：画像付きフィーチャーカード。先述のhextra/feature-gridのショートコード内で使うことでカードの並びを自動で整理してくれる。 {{\u003c/* hextra/feature-card title=\"Love For Qom\" subtitle=\"Cypherpunks write code\" class=\"hx-aspect-auto md:hx-aspect-[1.1/1] max-md:hx-min-h-[340px]\" image=\"images/sample4.jpg\" imageClass=\"hx-top-[80%] hx-[24px] hx-w-[110%] sm:hx-w-[110%] dark:hx-opacity-80\" style=\"background: radial-gradient(ellipse at 50% 80%,rgba(255,0,255,0.3),hsla(0,0%,100%,0));\" */\u003e}} よく使われるパラメータ（実利用から確認）：\ntitle：カードのタイトル\nsubtitle：サブタイトル\nlink :ファイルパス（相対パス）/URL\nclass：カード全体に当てるクラス\nimage：画像パス/URL\nimageClass：画像要素に当てるクラス\nstyle：インラインCSS（背景グラデ等）\n実使用コードはテーマのQ\u0026Aに多数掲載。 GitHub\n（※完全な仕様はショートコードの実装を読む必要がありますが、上記はドキュメント/議論での反復使用が確認できるもの）","hero系ショートコード一覧#Hero系ショートコード一覧":"","使い方の実務ヒント#使い方の実務ヒント":" HTMLでラップしない：Hero系を\u003cdiv\u003eで囲んでマージンを付けると、Markdown/Goldmarkの解釈順の都合でショートコードが展開されなくなることがあるので注意。余白は周辺に別ブロックを置くか、hero-section などショートコード側で調整するのが安定です。 GitHub\nhero-buttonの過信に注意：作者が「内部用なので流用は非推奨」と明言。ページ内のCTAは Tailwind で自作するか、既存の cards 系で代替するのが無難。 GitHub\nhero-sectionを積極活用：ヒーロー直下のセクション見出しを追加したいニーズに対して、公式にマージ済みの解。header と style を持つので、feature-grid の前に見出しを置くなどがやりやすいです。"},"title":"Hero short codes"},"/docs/steps/create_card/":{"data":{"":"","1-カードセクションの追加#1. カードセクションの追加":"ファイル: content/_index.md\n対象ファイルのコードを確認すると、今回はmdファイルの中に \u003cdiv\u003eタグ などのHTMLタグと {{\u003c/* hextra/hero-section */\u003e}} のようなショートコードが使われていることがわかります。 今回対象となるカードセクションは、まず{{\u003c/* hextra/feature-grid */\u003e}} ... {{\u003c/* /hextra/feature-grid */\u003e}}というカードが格納されるコンテナのようなセクションがあり、その中に自分のカードのショートコード {{\u003c/* card */\u003e}}　が複数のプロパティ付きで装飾されています。このショートコードを適切な位置に追加してみましょう。\n# カードを囲むグリッドのセクションのためのショートコード {{\u003c/* hextra/feature-grid */\u003e}} # カードのショートコード（各種パラメータを設定） {{\u003c/* card title=\"your user name\" subtitle=\"something blur blur blur\" . . . */\u003e}} . . . # グリッドのセクションのショートコードはここまで {{\u003c/* hextra/feature-grid */\u003e}} 自分用の{{\u003c/* card */\u003e}}ショートコードを追加し、以下を参考にカスタマイズしてみましょう。また、カードに使用したい画像はcontent/imagesフォルダに追加して下さい。\n📟 各パラメータの意味 feature-cardの主要属性 属性名 役割 例 title カードの見出し \"Love For Qom\" subtitle 補足説明（見出しの下） \"What this place is and why we're here.\" link リンクのパスを指定 内部リンク・外部リンク可 class カードの外枠に適用するTailwindクラス（Hextraはhx-付き） hx-aspect-auto md:hx-aspect-[1.1/1] max-md:hx-min-h-[340px] image カード背景や上部に表示する画像パス \"images/sample1.jpg\" imageClass 画像要素に適用するクラス hx-absolute hx-max-w-[100%] ... style インラインCSSスタイルを直接指定 background: radial-gradient(...) クラス指定の意味（今回の例） class=\"hx-aspect-auto md:hx-aspect-[1.1/1] max-md:hx-min-h-[340px]\" hx-aspect-auto → 縦横比を自動設定\nmd:hx-aspect-[1.1/1] → 中画面サイズ以上では縦横比 1.1:1\nmax-md:hx-min-h-[340px] → 中画面未満では高さ最小 340px\nimageClass=\"hx-top-[40%] hx-[24px] hx-w-[110%] sm:hx-w-[110%] dark:hx-opacity-80\" hx-top-[40%] → 画像の位置（上から40%）\nhx-[24px] → 特殊クラス（おそらく位置か余白のカスタム値、テーマのTailwind設定依存）\nhx-w-[110%] → 幅110%\nsm:hx-w-[110%] → 小画面以上では幅110%\ndark:hx-opacity-80 → ダークモード時に透明度80%\n背景スタイルの意味 style=\"background: radial-gradient(ellipse at 50% 80%,rgba(200,80,0,0.3),hsla(0,0%,100%,0));\" 背景にラジアルグラデーションを適用\n中心を少し下（50% 横方向中央、80% 縦方向）に設定\n中心付近は橙系の薄い色(200,80,0,0.3)、外側は透明\n参考：Hextra の Card ショートコード（使用例・パラメータ） IDocument tailwindcss","2-カードにリンクを追加する#2. カードにリンクを追加する":"カードに値を追加できたらStep 1で作成した記事とリンクさせるためにlinkプロパティを追加し、適切な相対パスを使用してカードと記事とをリンクさせて下さい。相対パスをどのように記述するかは自分で考えてみましょう。（わからなければ実際のコードを見て下さい。）","3-変更をコミットプッシュ#3. 変更をコミット＆プッシュ":"linkのパスが記述できたらローカルサーバー：1313を起動し、ブラウザからアクセスして下さい。ホーム画面から画像をクリックして、意図した画面（自分の紹介ページ）に画面が遷移するか確認しましょう。 確認ができたら自分のブランチに変更をコミット＆プッシュしておきましょう。次はいよいよプルリクエストの作成です。","トップページに自分のカードを追加する#🪪トップページに自分のカードを追加する":"\ncontent/_index.mdを編集し、カードセクションを追加する クラスにスタイルを追加して調整する カードにリンクを追加してStep 1で作成したファイルとリンクさせる 変更をコミット＆プッシュする 今回は、ホーム画面に画像付きのカードを作成し、Step1で作成した自己紹介のmdファイルとリンクさせます。具体的な見た目の調整や値の調整の作業が中心になります。細かい調整の方法を体験していきましょう！"},"title":"Step 2"},"/docs/steps/edit_md/":{"data":{"":"","2-obsidianでusernamemdファイルを編集する#2. Obsidianで\u003ccode\u003e\u0026lt;username\u0026gt;.md\u003c/code\u003eファイルを編集する。":"📝Obsidianを使って自分の紹介ページを編集する 自分の名前の.mdファイルをcontent/docs/membersディレクトリに作成 Obsidianでファイルを編集 変更をコミット＆プッシュする 最初のステップとなる今回は、まず正しいディレクトリに自分のファイルを作成し、Obsidianを使ってファイルを編集する方法を学びます。まずはとにかく手を動かしてみましょう。\n1.　自分の名前の\u003cusername\u003e.mdファイルをcontent/docs/membersディレクトリに作成 まずはcd コマンドで目的のディレクトリに移動し、\u003cusername\u003e.mdファイルを作成していきます。 現在の場所はプロジェクトのルートディレクトリ（playground）にあると仮定します。 ターミナルから以下のコマンドを使用して移動して下さい。VSコードを使用している場合は画像のように画面を分割してターミナルを表示させておくと便利です。\n# membersディレクトリに移動 cd content/docs/members # \u003cusername\u003e.mdファイルを作成（⚠️小文字の使用推奨） ## macターミナル touch love.md ## windows powershell New-Item love.md 2. Obsidianで\u003cusername\u003e.mdファイルを編集する。 Obsidianを使うとマークダウンファイルの編集作業効率が非常に上がるのでおすすめです。先ほど作成したファイルをObsidianで開いてみましょう。 まずはObsidianのホーム画面の 「保管庫としてフォルダを開く」 から、membersフォルダを選択します。先ほど作成した\u003cusername\u003e.mdファイルを自由に編集してみて下さい。マークダウン記法を使うと、記述した内容が実際にサイトで表示されるようにレンダリングされていることがわかると思います。見た目の調整はObsidianで編集することで大まかな部分を整えつつ、細かい部分はローカルホストで立ち上げたブラウザを確認しながら進めることをお勧めします。\nmembers/\u003cusername\u003e.md# フロントマターを先頭に記述 --- title: \u003cusername\u003e type: docs sidebar: open: true --- # 見出し # ~ ###### (h1 ~ h6)までの見出しの文字の大きさを指定できます。 画像を差し込みたい場合は、`content/images`フォルダに画像を格納。 ![テキスト](ファイルパス)という記述で差し込むことができます。 `images`フォルダにある`love.jpg`を差し込みたい場合は、以下のように記述します。(相対パスに注意) ![Love For Qom](/images/love.jpg) ショートコードを使うことでhextraに定義された特殊なレンダリングを使うこともできます。幅と高さを指定することや画像の表示形式を指定することも可能です。（幅400 x 高さ400） {{\u003c figure src=\"../../../images/love.JPG\" title=\"\" class=\"img-fluid\" width=\"400\" height=\"400\" \u003e}} その他自己紹介やスキル、プロジェクトへの意気込みなどを、マークダウン記法を使いながら自由に書いてください。 - Twitter: … - Telegram: … - Link: … Tip\nテーマの詳細な設定や、ショートコード一覧は Hextra ドキュメントを参照してください。 Document","3--変更のコミットとプッシュ#3.  変更のコミットとプッシュ":" # 変更をステージに上げる git add . # 意味のあるコミットメッセージで git commit -m \"add \u003cusername\u003e profile page\" # 初回は upstream 設定込みでプッシュ git push -u origin feature/\u003cusername\u003e \u003cusername\u003eの部分は自分のネームに置き換えて下さい。 Important\npush の際は必ずどのブランチにプッシュしようとしているかを確認して下さい。 初回はgit push に-u オプションをつけておくことで、2回目以降はgit push だけでプッシュできます。","obsidianを使って自分の紹介ページを編集する#📝Obsidianを使って自分の紹介ページを編集する":"","トラブルシューティングよくある#トラブルシューティング（よくある）":" Permission denied (publickey)\n→ GitHub に SSH 公開鍵を登録するか、HTTPS の URL でクローン/プッシュしてください。\ndev が進んでいてコンフリクト\n→ origin/dev を取り込み、コンフリクト解消後に再コミット \u0026 プッシュ。詳細"},"title":"Step 1"},"/docs/steps/pull_request/":{"data":{"":"","1-prの作成#1. PRの作成":" GitHub 上で base: dev / compare: feature/\u003cusername\u003e を選んで PR 作成\nPR の説明欄に：変更点の概要を記載 -\u003e “submit\"ボタン\nPRを作成したら Telegram で管理者に連絡","2-レビュー--修正--マージの流れ#2. レビュー → 修正 → マージの流れ":"レビューで問題がなければ、そのままマージされます。レビューコメントで修正依頼が来たら、同じブランチに修正コミットしてプッシュすれば PR に自動で反映されます。\n# これまでと同じように編集 git add . # コメントは意味のあるコメントに git commit -m \"修正内容をコメント\" # 初回で　`-u`オプションをつけた場合はpushのみで変更をリモートにプッシュできます。 git push 修正中にdev に変更があった場合は、変更をプッシュできなくなることがあります。以下の手順でリモートのdevの変更を取り込んでから再度プッシュして下さい： # モートリポジトリの `dev` ブランチの最新状態を取得 git fetch origin dev # \u003cusername\u003eの部分は自分の命名したユーザー名に置き換え git checkout feature/\u003cusername\u003e # ローカルのdevブランチに最新版のdevをマージ git merge origin/dev # `fetch` + `merge` を一度にやりたい場合はこちらでも可 git pull --no-rebase origin dev 問題なければ管理者が dev にマージし、適切なタイミングで main に反映します（基本は管理者作業）。 ","プルリクエストpr-を作成するdevブランチに向けて#🎤プルリクエスト(PR) を作成する（devブランチに向けて）":" GitHub 上で ** devブランチにPR作成 レビューを受け、修正があれば修正を行う =\u003e 問題なければマージ ブランチを削除する 今回は最終回となるプルリクエストの送信と、修正があった場合の対応の流れを確認していきます。それでは早速始めていきましょう。","完了後ブランチを削除#完了後ブランチを削除":" マージ後は GitHub 上の 「Delete branch」 ボタンで feature/\u003cusername\u003e を削除\nローカルでも削除してスッキリ：\ngit branch -d feature/\u003cusername\u003e git fetch -p お疲れ様でした！！🙌 プルリクエストが承認され、mainブランチに変更がマージされたらトップページにあなたの変更が反映されます。 この練習が終了したら、次は実際にQom Wikiの編集に参加してみましょう。"},"title":"Step 3"},"/introduction/":{"data":{"":"","0-前提#0. 前提":" Git 使用法と GitHub アカウントを登録済み\n（推奨）SSH 接続設定済み（または HTTPS で OK）\nリポジトリのコラボレーターの招待を了承している（要連絡：TG:@LoveForQom88）\nローカルで Hugo が動く（hugo version が通ればOK / Extended推奨）\nGit Flowの手順に沿って作業を進めていくことを理解している\nImportant\nまだ上記の準備がお済みでない場合は、まずこちらを参考に必要な準備をお済ませください。","1-リポジトリの取得と初期設定#1. リポジトリの取得と初期設定":" # 1. クローン（SSH の例） git clone git@github.com:LoveForQom/playground.git cd playground # 2. 最新の dev ブランチのコードを取得 git fetch origin git checkout dev git pull origin dev # 3. 自分用の作業ブランチを作成してブランチの切り替え（例: feature/pomworld） git checkout -b feature/pomworld Caution\n以降の作業は 必ず自分の feature/\u003cusername\u003e ブランチ で行ってください。","2-ローカルプレビューhugo#2. ローカルプレビュー（Hugo）":" # ターミナルでローカルサーバーを起動 hugo server --buildDrafts --disableFastRender ブラウザで http://localhost:1313/ を開くとプレビューできます。\nこのリポジトリは Hugo の Hextra テンプレートのクイックスタート構成を使用しています。 Hextra Documents,GitHub\nNext \u003e\u003e ","gitflow-hands-on-playground#Gitflow Hands-on Playground":" Playgroundはチーム全員が Gitflow メソッドを体験しながら、Hugo + Hextra のサイト編集を学ぶための実践用リポジトリです。学びたい意欲のある方は、どなたでもご参加いただけます。\n目的： Qom Wikiと同様の構成を再現した環境で、本ページの説明を見ながら実際に自分自身で作ってみることでページの構成要素や各パラメータの扱いなど、基本的な操作を理解し、共に飛行訓練に参加するための準備をここで行うことを目的とします。\n対象： Qom Wikiの編集に参加してみたいが具体的な方法・手段を知りたい方\nGitの扱いに自信がなく、一度説明を見ながら体験をしてみたい方\n期待される成果： Obsidianを利用したmd ファイルの効率的な編集とレイアウト調整\nHextraテンプレートを使用した実用的なHugoサイトビルド技術\nGitFlowに則ったチーム共同開発の基本フローの体験\nGitコマンドによるGitHubリポジトリの操作"},"title":"Introduction"}}